// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/popoffvg/async-arch/tasks/ent"

func NewTaskCreate(e *ent.Task) *TaskCreate {
	if e == nil {
		return nil
	}
	var ret TaskCreate
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Description = e.Description
	ret.IsDone = NewOptBool(e.IsDone)
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.AssignedID = NewOptString(e.AssignedID)
	return &ret
}

func NewTaskCreates(es []*ent.Task) []TaskCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]TaskCreate, len(es))
	for i, e := range es {
		r[i] = NewTaskCreate(e).Elem()
	}
	return r
}

func (t *TaskCreate) Elem() TaskCreate {
	if t == nil {
		return TaskCreate{}
	}
	return *t
}

func NewTaskList(e *ent.Task) *TaskList {
	if e == nil {
		return nil
	}
	var ret TaskList
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Description = e.Description
	ret.IsDone = NewOptBool(e.IsDone)
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.AssignedID = NewOptString(e.AssignedID)
	return &ret
}

func NewTaskLists(es []*ent.Task) []TaskList {
	if len(es) == 0 {
		return nil
	}
	r := make([]TaskList, len(es))
	for i, e := range es {
		r[i] = NewTaskList(e).Elem()
	}
	return r
}

func (t *TaskList) Elem() TaskList {
	if t == nil {
		return TaskList{}
	}
	return *t
}

func NewTaskRead(e *ent.Task) *TaskRead {
	if e == nil {
		return nil
	}
	var ret TaskRead
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Description = e.Description
	ret.IsDone = NewOptBool(e.IsDone)
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.AssignedID = NewOptString(e.AssignedID)
	return &ret
}

func NewTaskReads(es []*ent.Task) []TaskRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]TaskRead, len(es))
	for i, e := range es {
		r[i] = NewTaskRead(e).Elem()
	}
	return r
}

func (t *TaskRead) Elem() TaskRead {
	if t == nil {
		return TaskRead{}
	}
	return *t
}

func NewTaskUpdate(e *ent.Task) *TaskUpdate {
	if e == nil {
		return nil
	}
	var ret TaskUpdate
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Description = e.Description
	ret.IsDone = NewOptBool(e.IsDone)
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.AssignedID = NewOptString(e.AssignedID)
	return &ret
}

func NewTaskUpdates(es []*ent.Task) []TaskUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]TaskUpdate, len(es))
	for i, e := range es {
		r[i] = NewTaskUpdate(e).Elem()
	}
	return r
}

func (t *TaskUpdate) Elem() TaskUpdate {
	if t == nil {
		return TaskUpdate{}
	}
	return *t
}

func NewTaskAssignedRead(e *ent.User) *TaskAssignedRead {
	if e == nil {
		return nil
	}
	var ret TaskAssignedRead
	ret.ID = e.ID
	ret.Login = e.Login
	return &ret
}

func NewTaskAssignedReads(es []*ent.User) []TaskAssignedRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]TaskAssignedRead, len(es))
	for i, e := range es {
		r[i] = NewTaskAssignedRead(e).Elem()
	}
	return r
}

func (u *TaskAssignedRead) Elem() TaskAssignedRead {
	if u == nil {
		return TaskAssignedRead{}
	}
	return *u
}

func NewUserTasksList(e *ent.Task) *UserTasksList {
	if e == nil {
		return nil
	}
	var ret UserTasksList
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Description = e.Description
	ret.IsDone = NewOptBool(e.IsDone)
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.AssignedID = NewOptString(e.AssignedID)
	return &ret
}

func NewUserTasksLists(es []*ent.Task) []UserTasksList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserTasksList, len(es))
	for i, e := range es {
		r[i] = NewUserTasksList(e).Elem()
	}
	return r
}

func (t *UserTasksList) Elem() UserTasksList {
	if t == nil {
		return UserTasksList{}
	}
	return *t
}
