// Code generated by ent, DO NOT EDIT.

package ogent

import (
	"context"
	"net/http"

	"github.com/go-faster/jx"
	"github.com/popoffvg/async-arch/tasks/ent"
	"github.com/popoffvg/async-arch/tasks/ent/task"
	"github.com/popoffvg/async-arch/tasks/ent/user"
)

// OgentHandler implements the ogen generated Handler interface and uses Ent as data layer.
type OgentHandler struct {
	client *ent.Client
}

// NewOgentHandler returns a new OgentHandler.
func NewOgentHandler(c *ent.Client) *OgentHandler { return &OgentHandler{c} }

// rawError renders err as json string.
func rawError(err error) jx.Raw {
	var e jx.Encoder
	e.Str(err.Error())
	return e.Bytes()
}

// CreateTask handles POST /tasks requests.
func (h *OgentHandler) CreateTask(ctx context.Context, req CreateTaskReq) (CreateTaskRes, error) {
	b := h.client.Task.Create()
	// Add all fields.
	b.SetTitle(req.Title)
	b.SetDescription(req.Description)
	// Add all edges.
	if v, ok := req.Assigned.Get(); ok {
		b.SetAssignedID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Task.Query().Where(task.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewTaskCreate(e), nil
}

// ReadTask handles GET /tasks/{id} requests.
func (h *OgentHandler) ReadTask(ctx context.Context, params ReadTaskParams) (ReadTaskRes, error) {
	q := h.client.Task.Query().Where(task.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewTaskRead(e), nil
}

// UpdateTask handles PATCH /tasks/{id} requests.
func (h *OgentHandler) UpdateTask(ctx context.Context, req UpdateTaskReq, params UpdateTaskParams) (UpdateTaskRes, error) {
	b := h.client.Task.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.Title.Get(); ok {
		b.SetTitle(v)
	}
	if v, ok := req.Description.Get(); ok {
		b.SetDescription(v)
	}
	// Add all edges.
	if v, ok := req.Assigned.Get(); ok {
		b.SetAssignedID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Task.Query().Where(task.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewTaskUpdate(e), nil
}

// DeleteTask handles DELETE /tasks/{id} requests.
func (h *OgentHandler) DeleteTask(ctx context.Context, params DeleteTaskParams) (DeleteTaskRes, error) {
	err := h.client.Task.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteTaskNoContent), nil

}

// ListTask handles GET /tasks requests.
func (h *OgentHandler) ListTask(ctx context.Context, params ListTaskParams) (ListTaskRes, error) {
	q := h.client.Task.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewTaskLists(es)
	return (*ListTaskOKApplicationJSON)(&r), nil
}

// ReadTaskAssigned handles GET /tasks/{id}/assigned requests.
func (h *OgentHandler) ReadTaskAssigned(ctx context.Context, params ReadTaskAssignedParams) (ReadTaskAssignedRes, error) {
	q := h.client.Task.Query().Where(task.IDEQ(params.ID)).QueryAssigned()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewTaskAssignedRead(e), nil
}

// ListUserTasks handles GET /users/{id}/tasks requests.
func (h *OgentHandler) ListUserTasks(ctx context.Context, params ListUserTasksParams) (ListUserTasksRes, error) {
	q := h.client.User.Query().Where(user.IDEQ(params.ID)).QueryTasks()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewUserTasksLists(es)
	return (*ListUserTasksOKApplicationJSON)(&r), nil
}
