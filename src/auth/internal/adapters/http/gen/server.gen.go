// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
	ApiKeyAuthScopes = "apiKeyAuth.Scopes"
)

// Defines values for UserScopes.
const (
	UserScopesAdmin     UserScopes = "admin"
	UserScopesSuperuser UserScopes = "superuser"
	UserScopesUser      UserScopes = "user"
)

// User defines model for user.
type User struct {
	Login    string       `json:"login"`
	Password string       `json:"password"`
	Scopes   []UserScopes `json:"scopes"`
}

// UserScopes defines model for User.Scopes.
type UserScopes string

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody = User

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = PostUsersJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	PostLogin(c *gin.Context)

	// (GET /users)
	GetUsers(c *gin.Context)

	// (PATCH /users)
	PatchUsers(c *gin.Context)

	// (POST /users)
	PostUsers(c *gin.Context)

	// (POST /verify)
	PostVerify(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostLogin(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUsers(c)
}

// PatchUsers operation middleware
func (siw *ServerInterfaceWrapper) PatchUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchUsers(c)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostUsers(c)
}

// PostVerify operation middleware
func (siw *ServerInterfaceWrapper) PostVerify(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostVerify(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/login", wrapper.PostLogin)

	router.GET(options.BaseURL+"/users", wrapper.GetUsers)

	router.PATCH(options.BaseURL+"/users", wrapper.PatchUsers)

	router.POST(options.BaseURL+"/users", wrapper.PostUsers)

	router.POST(options.BaseURL+"/verify", wrapper.PostVerify)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xTwW7UQAz9lZXhmDbbllNuFAkE5YCAAtJqD7OJdzMlmRk8zqKoyr8jO9lm0w1tT5l4",
	"xvZ7z8/3kPs6eIeOI2T3EPMSa6PHJiLJN5APSGxRo5XfWScHbgNCBpHJuh10CQQT419PhVxuPdWGIRuD",
	"yWlCzH3oi1rGWg/omhqyFZiitg6SHkMCsQlIel7P1BkChsi00HUJEP5pLGEhlXq8yTGQoe9Yym/uMGdN",
	"jZg3ZLn9Jjr04K5NtPnbhssHfSRnI9GRVckcBMs1GkI6vN7o3/uDGJ9+ftf2hxJ6+7iGoLBu61Vjy5Xc",
	"aL0E9kjRegcZLM8vpJsP6EywkMHV+fL8UmlyqajTh0EFH1m+MkXD1ruPBWTwxUf+PGhDGIN3sad7uVzK",
	"p8CYkw3c9zMNo2O7tblWgARKNAWSZvw6E3xnN9jOJpYL9r/RHZibGfMo6TfLq9P8raeNLQp0k+lAtprM",
	"ZbXu1nKfikcU0w5nOH9AvtUH85Rz74SlHMVBGPnaF+24FROnvibcQgav0nF/0mF5FMWMMbvkEbmvyA25",
	"hYJeVDbyDMkjPylLHXFezgxUwk/Rm/a+DYVhXPRQpe3/bTIWnYhyJJcJoRqskd5F76aaPS/VdGmZGuxe",
	"wuEd4RGH55QTf+yR7LZ9eit+9G9eAiAg1TbKTi52ZBxjcYrDBHuD7TEOfUF7derqHhqqhuWPWZpWPjdV",
	"6SOnsjrp/gK6dfcvAAD//7Zk0KKmBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
